import json
import re
from typing import Optional, Dict, List

name_file_path = "../../resource/service_names.txt"
product_vendor_file_path = "../../resource/product_vendors.txt"
cve_file_path = "../../resource/cve.db"
cve_detail_file_path = "../../resource/cve_details.db"


def file2dict(file_path) -> Dict[str, str]:
    out_dic = {}
    contents = open(file_path)
    for line in contents.readlines():
        parts = line.split(":")
        out_dic[parts[0].lower()] = parts[1].strip().lower()
    return out_dic


def product_vendor_file2dict(file_path) -> Dict[str, list]:
    out_dic = {}
    contents = open(file_path)
    for line in contents.readlines():
        parts = line.split(":")
        out_dic[parts[0].lower()] = parts[1].strip().lower().split(',')
    return out_dic


cve_dict = json.load(open(cve_file_path))
cve_details_dict = json.load(open(cve_detail_file_path))
service_name_dic = file2dict(name_file_path)
product_vendor_dic = product_vendor_file2dict(product_vendor_file_path)


# not need set vendor except special items:
def convert_service_name(service_name, vendor=None):
    service_name = to_standard_query(service_name)
    if vendor is not None:
        vendor = to_standard_query(vendor)
        service_name = vendor + "_" + service_name
    if service_name in service_name_dic:
        service_name = service_name_dic[service_name]
    return service_name


def make_query(service_name, service_version, service_revision):
    query = service_name
    if service_version is not None and len(service_version) > 0:
        query += ':' + service_version
    if service_revision is not None and len(service_revision) > 0:
        query += ':' + service_revision
    return query


def version2standard(version):
    same_versions_re = re.compile("([.0-9]+)(?:\.0+)+$")
    flag_version = True
    while flag_version:
        match = same_versions_re.match(version)
        if match:
            version = match.group(1)
        else:
            flag_version = False
    return version


def to_standard_query(q):
    q = q.replace(' ', '_')
    q = q.strip().lower()
    return q


def cve_search(vendor, service, version, revision, cve_list, cve_details_list):
    if service is None or len(service) == 0:
        return
    service = convert_service_name(service)
    if vendor is not None:
        if product_vendor_dic.get(service) is not None:
            if vendor.lower() not in product_vendor_dic[service]:
                service = convert_service_name(service, vendor)

    # queries = [make_query(service, '*', '*')]
    if version is None:
        version = "-"
    if revision is None:
        revision = "-"
    version = version2standard(version)

    queries = [
        make_query(service, '*', '*'),
        make_query(service, version, '*'),
        make_query(service, '*', revision),
        make_query(service, version, revision)
    ]

    for query in queries:
        query = to_standard_query(query)
        # old_cve
        # cve_codes = cve_dict.get(query, None)
        # if cve_codes is not None:
        #     for cve_code in cve_codes:
        #         if cve_code not in cve_list:
        #             cve_list.append(cve_code)
        #             cve_details_list.append(cve_details_dict.get(cve_code))
        cve_codes_str = cve_dict.get(query, None)
        if cve_codes_str is not None:
            cve_codes = cve_codes_str.split(',')
            if cve_codes is not None:
                for cve_code in cve_codes:
                    if cve_code not in cve_list:
                        cve_list.append(cve_code)
                        cve_details_list.append(cve_details_dict.get(cve_code))
        ###


cve_list = []
cve_details_list = []
# cve_search("microsoft", "iis", "8.5", None, cve_list, cve_details_list)
# cve_search(None, "Titan FTPd", "6.24.621", None, cve_list, cve_details_list)
# cve_search(None, "Cerberus FTPd", "2.0", "beta1", cve_list, cve_details_list)
# cve_search(None, "Cerberus FTPd", "2.0", None, cve_list, cve_details_list)
# cve_search("Apache", "httpd", "2.4.18", None, cve_list, cve_details_list)
# cve_search("ibm", "http server", "1.3.19", None, cve_list, cve_details_list)
# cve_search("Cherokee", "HTTP Server", "0.5", None, cve_list, cve_details_list)
# cve_search("Icewarp", "mail server", "10.1.3", None, cve_list, cve_details_list)
# cve_search("Axigen", "mail server", "8.1.2", None, cve_list, cve_details_list)
# cve_search("Apache", "httpd", "2.0.48", None, cve_list, cve_details_list)
# cve_search(None, "windows_server_2012", "r2", None, cve_list, cve_details_list)
# cve_search(None, "vsftpd", "2.3.4", None, cve_list, cve_details_list)
# cve_search(None, "linux_kernel", "2.4.31", None, cve_list, cve_details_list)
# cve_search(None, "oracle", "18.0.0.0.0", None, cve_list, cve_details_list)
# cve_search(None, "oracle", "11.2.0.2.0", None, cve_list, cve_details_list)
# cve_search(None, "oracle", "11.2.0.2", None, cve_list, cve_details_list)
# cve_search(None, "MNG6200 Firmware", "C4835805jrc12FU121413.cpr", None, cve_list, cve_details_list)
# cve_search(None, "Telepresence TC Software", "7.1.4", None, cve_list, cve_details_list)
# cve_search("Cisco", "TelePresence Quick Set SX20", None, None, cve_list, cve_details_list)
# cve_search("Microsoft", "Exchange Server", "2019", "Cumulative Update 2", cve_list, cve_details_list)
# cve_search("Douran", "Dourtal ECM", "3.9.7.8", None, cve_list, cve_details_list)
# cve_search(None, "Drupal", "7", None, cve_list, cve_details_list)
# cve_search(None, "Joomla", "1.5", None, cve_list, cve_details_list)
# cve_search(None, "WP-Rocket", "2.8.14", None, cve_list, cve_details_list)
# cve_search(None, "macos", None, None, cve_list, cve_details_list)
# cve_search("Argosoft", "FTP server", "1.4.3.5", None, cve_list, cve_details_list)
# cve_search(None, "openssh", "7.4", None, cve_list, cve_details_list)
# cve_search(None, "qnx", "6.4.1", None, cve_list, cve_details_list)
# cve_search(None, "RedHat Enterprise Linux", "7.0", None, cve_list, cve_details_list)
# cve_search(None, "RedHat Enterprise Linux", "7.0", None, cve_list, cve_details_list)
# cve_search(None, "Home Assistant", "0.20.3", None, cve_list, cve_details_list)
cve_search(None, "Samba", "4.10.10", None, cve_list, cve_details_list)

for idx, cve in enumerate(sorted(cve_list)):
    print("{}, CVE-{}".format(idx, cve))
