import json
import re
from typing import Dict

import pymongo as pymongo
from functional import seq

product_vendor_file_path = "../resource/product_vendors.txt"
same_service_name_dict = {
    "internet_information_server": "iis",
    "internet_information_services": "iis",
    "merak_mail_server": "mail_server",
    "icewarp_mail_server": "mail_server",
    "database_server": "database",
    "oracle_database": "database",
    "telepresence_tc": "telepresence_tc_software",
    "liferay": "liferay_portal",
    "joomla\\!": "joomla",
    "plone_cms": "plone",
    "kentico_cms": "kentico",
    "evolution_cms": "modx_revolution",
    "phusion_passenger": "passenger",
    "macos": "mac_os",
    "qnx": "qnx_neutrino_rtos",
    "qnx_rtos": "qnx_neutrino_rtos",
    "rtos": "qnx_neutrino_rtos",
    "neutrino_rtos": "qnx_neutrino_rtos",
}


def product_vendor_file2dict(file_path) -> Dict[str, list]:
    out_dict = {}
    contents = open(file_path)
    print(contents)
    for line in contents.readlines():
        print(line)
        parts_t = line.split(":")
        out_dict[parts_t[0].lower()] = parts_t[1].strip().lower().split(',')
    return out_dict


def version2standard(version):
    same_versions_re = re.compile("([.0-9]+)(?:\.0+)+$")
    flag_version = True
    while flag_version:
        match = same_versions_re.match(version)
        if match:
            version = match.group(1)
        else:
            flag_version = False
    return version


def score_label(score):
    if score is None:
        return "None"

    score = float(score)
    if score == 0.0:
        return "None"
    if 0.1 <= score <= 3.9:
        return "Low"
    if 4.0 <= score <= 6.9:
        return "Medium"
    if 7.0 <= score <= 8.9:
        return "High"
    if 9.0 <= score:
        return "Critical"


mongo_client = pymongo.MongoClient("mongodb://localhost:27017/")["cvedb"]
collection = mongo_client["cves"]

product_vendor_dic = product_vendor_file2dict(product_vendor_file_path)
records = []
count = 0
cve_dic = {}
cve_detail_dic = {}
cve_cursor = collection.find()
for cve in cve_cursor:
    configs = cve['vulnerable_product']

    results = []
    for config in configs:
        parts = config.lower().split(":")
        vendor = parts[3]
        product = parts[4]
        version = parts[5]
        revision = parts[6]

        # if version == "-":  # skip no version
        #     continue

        version = version2standard(version)

        if product in same_service_name_dict:
            product = same_service_name_dict[product]

        # only add results(CVEs) that are for the vendor in dictionary; not others:
        if product_vendor_dic.get(product) is not None:
            if vendor not in product_vendor_dic[product]:
                product = vendor + "_" + product

        # old_cve       # dr. Zarif said to comment this condition!
        # if revision != '*':
        #     q = product + ":" + version + ":" + "*"
        #     if q in results:
        #         results.remove(q)
        ###
        results.append(product + ":" + version + ":" + revision)

    conf = seq(results).distinct().to_list()
    cve_id = str(cve['id'])
    if cve_id.lower().startswith("cve-"):
        cve_id = cve_id[4:]
    else:
        print("WARNING::cve_id({}) is not standard".format(cve_id))

    cve_type = cve['access'].get('vector', None)
    if cve_type and cve_type == 'NETWORK':
        cve_type = 'REMOTE'

    # old_cve
    # cve_detail_dic[cve_id] = {
    #     'code': cve_id,
    #     'type': cve_type,
    #     'complexity': cve['access'].get('complexity', None),
    #     'score': cve['cvss'],
    #     'score_label': score_label(cve['cvss']),
    # }
    cve_cvss = cve['cvss']
    if cve_type is None:
        cve_type = ""
    if cve_cvss is None:
        cve_cvss = ""
        cve_score = ""
    else:
        cve_score = score_label(cve_cvss)
    cve_detail_dic[cve_id] = cve_type + "," + cve['access'].get('complexity', "") + "," + str(cve_cvss) \
                             + "," + cve_score

    for c in conf:
        if c in cve_dic:
            cve_dic[c] += "," + cve_id
        else:
            cve_dic[c] = cve_id

# old_cve
# for key, value in cve_dic.items():
#     cve_dic[key] = list(value)
###

print("start to create cve.db")
print(cve_dic)
print(cve_detail_dic)
json.dump(cve_dic, open("../resource/cve.db", 'w'))
print("cve.db finished.")
print("start to create cve_details.db")
json.dump(cve_detail_dic, open("../resource/cve_details.db", 'w'))
print("cve_details.db finished.")
